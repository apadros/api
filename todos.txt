Array
	- A structure to encapsulate both static and dynamic arrays into a single type
		- Initializer overloads
		- Supporting generic functions
		- ForArray()
	- Add to array function
	- Clear array function

Logging
  - Stack trace printing
	
Memory
	- Allow client code to set a global maximum for memory allocation
		(i.e. I don't want my program to allocate more than X globally)
		
Misc
	- Any code marked as @EXPORT_API in calendar project
		
String
	- Rounding within F32ToString()
	- Concatenation
		 - Use short_string or temp dynamic memory?
	- Updating short_string to use dynamic memory to allow for variables / required lengths
		- 2 options 
			- 1. Keep a table of dynamic memory pointers for each allocation
				- Fixed size still presents a limit, unless this is also dynamically allocated
					- If so, needs to be freed at program exit.
						- Requires an Init / Shutdown pair of functions
					- Give user ability to specify the table length. E.g. are user and API every going to allocate more than 1024 or more dynamic memory pointers during program execution? Depends on the type of program.
					- Allow user to manually free memory as they go 
					- Make use of already-existing stack pushing functionality for the table, and manually free it at program exit - back to Init / Shutdown functions.
						- Shutdown can be made to be called automatically by API during program exit, need to find the relative function.
							- Can the same be done with Init() ?
			- 2. Perform a new dynamic memory allocation for each of these strings, having to call a deallocation function at some point. 
				- Contrains user to manually keep track of dynamic memory and call the deallocation function.
				- Freedom of allocation for the API and the user without need of Init / Shutdown functions and fixed-sized memory tables.
			- Currently prefer option 1 with a dynamically-allocated pointer table, automatically inited during program startup and freed during shutdown without need for intervention by the user.
				- Also allow user to manually free memory as the go, best of both options.
		
Time
	 - Creation of a date struct from a string
	 - Days of the week into date struct
	 - Consideration of work days in all relevant functionality
		
Win32
	- More in-depth logging in case of error detection / failure